<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.proj.main.result.dao.IResultDAO">

	<insert id="insertEnergyResult" parameterType="com.proj.main.result.dto.EnergyResultDTO">
	
		INSERT INTO ENERGY_RESULT (
		    mem_id, building_id, heating_perf, heating_demand, heating_load,
		    cooling_demand, sensible_energy, dehumid_energy, cooling_load,
		    sensible_load, dehumid_load, total_energy, co2_emissions, primary_energy,
		    airtightness, energy_grade, climate, avg_temp, heat_degree_day, 
		    building_type, thermal_storage, occupants, internal_heat, indoor_area, 
		    ventilation_volume, av_ratio, av_formula, roof_transmit, wall_transmit, 
		    floor_transmit, indirect_transmit, door_transmit, window_transmit, 
		    glazing_prod, glazing_transmit, solar_gain, frame_prod, frame_transmit, 
		    spacer_transmit, vent_prod, heat_eff, cool_eff, humidity_rec, power_cons, 
		    linear_coeff, point_coeff, annual_heat_cost, annual_energy_cost
		) VALUES (
		    #{memId}, #{buildingId}, #{heatingPerf}, #{heatingDemand}, #{heatingLoad},
		    #{coolingDemand}, #{sensibleEnergy}, #{dehumidEnergy}, #{coolingLoad},
		    #{sensibleLoad}, #{dehumidLoad}, #{totalEnergy}, #{co2Emissions}, #{primaryEnergy},
		    #{airtightness}, #{energyGrade}, #{climate}, #{avgTemp}, #{heatDegreeDay}, 
		    #{buildingType}, #{thermalStorage}, #{occupants}, #{internalHeat}, #{indoorArea}, 
		    #{ventilationVolume}, #{avRatio}, #{avFormula}, #{roofTransmit}, #{wallTransmit}, 
		    #{floorTransmit}, #{indirectTransmit}, #{doorTransmit}, #{windowTransmit}, 
		    #{glazingProd}, #{glazingTransmit}, #{solarGain}, #{frameProd}, #{frameTransmit}, 
		    #{spacerTransmit}, #{ventProd}, #{heatEff}, #{coolEff}, #{humidityRec}, #{powerCons}, 
		    #{linearCoeff}, #{pointCoeff}, #{annualHeatCost}, #{annualEnergyCost}
		)
	
	</insert>
	
	<insert id="insertEnergyUsed" parameterType="com.proj.main.result.dto.EnergyUsedDTO">
	
		INSERT INTO ENERGY_USED (
		    mem_id, building_id, elec_use, gas_use, solar_energy_production,
		    annual_elec_save, annual_elec_cost_save, elec_cost, gas_cost, 
		    all_co2, all_primary_energy, w_heating, w_hot_water, w_cooling, 
		    w_ventilation, w_light, w_cooking, w_appliance, w_etc, 
		    c_heating, c_hot_water, c_cooling, c_ventilation, c_light, 
		    c_cooking, c_appliance, c_etc, save_co2, save_wood
		) VALUES (
		    #{memId}, #{buildingId}, #{elecUse}, #{gasUse}, #{solarEnergyProduction},
		    #{annualElecSave}, #{annualElecCostSave}, #{elecCost}, #{gasCost}, 
		    #{allCo2}, #{allPrimaryEnergy}, #{wHeating}, #{wHotWater}, #{wCooling},
		    #{wVentilation}, #{wLight}, #{wCooking}, #{wAppliance}, #{wEtc}, 
		    #{cHeating}, #{cHotWater}, #{cCooling}, #{cVentilation}, #{cLight}, 
		    #{cCooking}, #{cAppliance}, #{cEtc}, #{saveCo2}, #{saveWood}
		)
	
	</insert>
	
	<insert id="insertUserBuilding">
		INSERT INTO BUILDING_INFO (
	        mem_id,
	        building_name,
	        building_id,
	        climate,
	        residential_type,
	        structure_type,
	        square_meter_area,
	        floors,
	        doors,
	        insulation_level,
	        window_level, 
	        ventilation_system,
	        solar_panel_kw
	    ) VALUES (
	        #{memId},               <!-- 사용자 ID -->
	        #{buildingName},         <!-- 건물 이름 -->
	        #{buildingId},           <!-- 건물 ID -->
	        #{climate},              <!-- 기후 조건 -->
	        #{residentialType},      <!-- 주거 유형 -->
	        #{structureType},        <!-- 구조 유형 -->
	        #{squareMeterArea},      <!-- 면적 (㎡) -->
	        #{floors},               <!-- 층수 -->
	        #{doors},                <!-- 문 개수 -->
	        #{insulationLevel},      <!-- 단열 수준 -->
	        #{windowLevel},          <!-- 창문 수준 -->
	        #{ventilationSystem},    <!-- 환기 시스템 -->
	        #{solarPanelKW}          <!-- 태양광 패널 용량 (kW) -->
	    )
	
	</insert>
	
	<select id="getUserBuilding" parameterType="String" resultType="com.proj.main.result.dto.UserBuildingDTO">
	SELECT * FROM BUILDING_INFO WHERE BUILDING_ID = #{buildingId}
	</select>
	
	<select id="getEnergyResult" parameterType="String" resultType="com.proj.main.result.dto.EnergyResultDTO">
	SELECT * FROM ENERGY_RESULT WHERE BUILDING_ID = #{buildingId}
	</select>
	
	<select id="getEnergyUsed" parameterType="String" resultType="com.proj.main.result.dto.EnergyUsedDTO">
	SELECT * FROM ENERGY_USED WHERE BUILDING_ID = #{buildingId}
	</select>
	
	<insert id="applyZEB" parameterType="com.proj.main.result.dto.ApplyZEBDTO">
		INSERT INTO APPLY_ZEB(
			mem_id, building_id, building_name, file_name, appliance_org, apply_date, approve_yn, reject_yn, zeb_level
		)VALUES(
			#{memId}, #{buildingId}, #{buildingName}, #{fileName}, #{applianceOrg}, #{applyDate}, 'N' , 'N', '0'
		)
	</insert>
	
	<select id="applyStatusById" parameterType="String" resultType="com.proj.main.result.dto.ApplyZEBDTO">
		SELECT * FROM APPLY_ZEB WHERE 1=1 AND mem_id = #{memId}
	</select>
	
	<select id="applyStatusAdmin" resultType="com.proj.main.result.dto.ApplyZEBDTO">
		SELECT * FROM APPLY_ZEB
	</select>
	
	<select id="getApplyByBid" parameterType="String" resultType="com.proj.main.result.dto.ApplyZEBDTO">
		SELECT * FROM APPLY_ZEB WHERE building_id = #{buildingId}
	</select>
	
	
	<select id="getBuildingId" parameterType="com.proj.main.member.dto.MyBuildingDTO" resultType="String">
		SELECT building_id FROM my_building WHERE 1=1 AND mem_id = #{memId} AND building_name = #{buildingName}
	</select>
	
	<insert id="insertTestResult" parameterType="com.proj.main.result.dto.TestResultDTO">
		 INSERT INTO TEST_RESULT (
	        mem_id,
	        building_id,
	        test_date,
	        energy_grade,
	        energy_independence_rate,
	        zeb_grade
	    ) VALUES (
	        #{memId},
	        #{buildingId},
	        #{testDate},
	        #{energyGrade},
	        #{energyIndependenceRate},
	        #{zebGrade}
	    )
	</insert>
	
	<insert id="applyResult" parameterType="com.proj.main.result.dto.ApplyResultDTO">
	    INSERT INTO APPLY_RESULT (
	        building_id,
	        approve_yn,
	        reject_reason,
	        zeb_level
	    ) VALUES (
	        #{buildingId},
	        #{approveYn},
	        <if test="approveYn == '거절'">
	            #{rejectReason}
	        </if>
	        <if test="approveYn != '거절'">
	            null
	        </if>,
	        #{zebLevel} 
	    )
	</insert>

	
	<update id="updateApplyStatus" parameterType="com.proj.main.result.dto.ApplyResultDTO">
		UPDATE APPLY_ZEB
		SET APPROVE_YN ='Y'
		, ZEB_LEVEL = #{zebLevel}
		WHERE BUILDING_ID = #{buildingId}
	</update>
	
	<update id="updateApplyZebReject" parameterType="com.proj.main.result.dto.ApplyZEBDTO">
		UPDATE APPLY_ZEB
		SET REJECT_YN ='Y'
		, ZEB_LEVEL = #{zebLevel}
		WHERE BUILDING_ID = #{buildingId}
	</update>
	
	<select id="selectApplyResult" parameterType="com.proj.main.result.dto.ApplyResultDTO" resultType="String">
		select reject_reason 
		from apply_result
		where building_id = #{buildingId}
	</select>
	
	<select id="selectApplyZEBId" parameterType="String" resultType="com.proj.main.result.dto.ApplyZEBDTO">
		select * 
		from apply_zeb
		where mem_id = #{memId}
	</select>
	
</mapper>